// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StomatoloskaOrdinacija;

#nullable disable

namespace StomatoloskaOrdinacija.Migrations
{
    [DbContext(typeof(OrdinacijaDbContext))]
    [Migration("20250129214135_InitialCreate2")]
    partial class InitialCreate2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StomatoloskaOrdinacija.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Admini");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.Models.Intervencija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cena")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Intervencije");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.Models.OcenaStomatologa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPacijenta")
                        .HasColumnType("int");

                    b.Property<int>("IdStomatologa")
                        .HasColumnType("int");

                    b.Property<string>("Komentar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ocena")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPacijenta");

                    b.HasIndex("IdStomatologa");

                    b.ToTable("OceneStomatologa");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.Models.Pacijent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrojNedolazaka")
                        .HasColumnType("int");

                    b.Property<string>("BrojTelefona")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Dugovanje")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Godine")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Slika")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UkupnoPotroseno")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Pacijenti");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.Models.Pregled", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailPacijenta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdPacijenta")
                        .HasColumnType("int");

                    b.Property<int?>("IdStomatologa")
                        .HasColumnType("int");

                    b.Property<bool>("Naplacen")
                        .HasColumnType("bit");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UkupnaCena")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPacijenta");

                    b.HasIndex("IdStomatologa");

                    b.ToTable("Pregledi");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.Models.PregledIntervencija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IntervencijaId")
                        .HasColumnType("int");

                    b.Property<int>("Kolicina")
                        .HasColumnType("int");

                    b.Property<int>("PregledId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IntervencijaId");

                    b.HasIndex("PregledId");

                    b.ToTable("PreglediIntervencije");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.Models.Stomatolog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrojPregleda")
                        .HasColumnType("int");

                    b.Property<string>("BrojTelefona")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PrvaSmena")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Slika")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("SlobodniDani")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Specijalizacija")
                        .HasColumnType("int");

                    b.Property<int>("UkupanBrojPregleda")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Stomatolozi");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.Models.OcenaStomatologa", b =>
                {
                    b.HasOne("StomatoloskaOrdinacija.Models.Pacijent", "Pacijent")
                        .WithMany("KomentariPacijenta")
                        .HasForeignKey("IdPacijenta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StomatoloskaOrdinacija.Models.Stomatolog", "Stomatolog")
                        .WithMany("KomentariStomatologa")
                        .HasForeignKey("IdStomatologa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pacijent");

                    b.Navigation("Stomatolog");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.Models.Pregled", b =>
                {
                    b.HasOne("StomatoloskaOrdinacija.Models.Pacijent", "Pacijent")
                        .WithMany("IstorijaPregleda")
                        .HasForeignKey("IdPacijenta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StomatoloskaOrdinacija.Models.Stomatolog", "Stomatolog")
                        .WithMany("PredstojeciPregledi")
                        .HasForeignKey("IdStomatologa");

                    b.Navigation("Pacijent");

                    b.Navigation("Stomatolog");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.Models.PregledIntervencija", b =>
                {
                    b.HasOne("StomatoloskaOrdinacija.Models.Intervencija", "Intervencija")
                        .WithMany("PregledIntervencije")
                        .HasForeignKey("IntervencijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StomatoloskaOrdinacija.Models.Pregled", "Pregled")
                        .WithMany("PregledIntervencije")
                        .HasForeignKey("PregledId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Intervencija");

                    b.Navigation("Pregled");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.Models.Intervencija", b =>
                {
                    b.Navigation("PregledIntervencije");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.Models.Pacijent", b =>
                {
                    b.Navigation("IstorijaPregleda");

                    b.Navigation("KomentariPacijenta");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.Models.Pregled", b =>
                {
                    b.Navigation("PregledIntervencije");
                });

            modelBuilder.Entity("StomatoloskaOrdinacija.Models.Stomatolog", b =>
                {
                    b.Navigation("KomentariStomatologa");

                    b.Navigation("PredstojeciPregledi");
                });
#pragma warning restore 612, 618
        }
    }
}
